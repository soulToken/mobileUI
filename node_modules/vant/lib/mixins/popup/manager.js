'use strict';

exports.__esModule = true;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _vue = require('vue');

var _vue2 = _interopRequireDefault(_vue);

var _Modal = require('./Modal');

var _Modal2 = _interopRequireDefault(_Modal);

var _context = require('./context');

var _context2 = _interopRequireDefault(_context);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var modalDefaultConfig = {
  className: '',
  customStyle: {}
};

var manager = {
  getModal: function getModal() {
    var modal = _context2.default.modal;


    if (!modal) {
      var ModalConstructor = _vue2.default.extend(_Modal2.default);
      modal = new ModalConstructor({
        el: document.createElement('div')
      });
      modal.$on('click', function () {
        manager.onClickOverlay();
      });

      _context2.default.modal = modal;
    }

    return modal;
  },


  // close popup when click modal && closeOnClickOverlay is true
  onClickOverlay: function onClickOverlay() {
    var top = _context2.default.top;

    if (top) {
      var instance = top.instance;

      if (instance && instance.closeOnClickOverlay) {
        instance.close();
      }
    }
  },
  openModal: function openModal(instance, config) {
    var id = config.id,
        dom = config.dom;

    var exist = _context2.default.stack.some(function (item) {
      return item.id === id;
    });

    if (!exist) {
      var targetNode = dom && dom.parentNode && dom.parentNode.nodeType !== 11 ? dom.parentNode : document.body;
      _context2.default.stack.push({ instance: instance, id: id, config: config, targetNode: targetNode });
      this.updateModal();
    };
  },
  closeModal: function closeModal(id) {
    var stack = _context2.default.stack;


    if (stack.length) {
      if (_context2.default.top.id === id) {
        stack.pop();
        this.updateModal();
      } else {
        _context2.default.stack = stack.filter(function (item) {
          return item.id !== id;
        });
      }
    }
  },
  updateModal: function updateModal() {
    var modal = this.getModal();

    if (modal.$el.parentNode) {
      modal.visible = false;
    }

    if (_context2.default.top) {
      var _context$top = _context2.default.top,
          targetNode = _context$top.targetNode,
          config = _context$top.config;


      targetNode.appendChild(modal.$el);
      (0, _assign2.default)(modal, (0, _extends3.default)({}, modalDefaultConfig, config, {
        visible: true
      }));
    }
  }
};

exports.default = manager;