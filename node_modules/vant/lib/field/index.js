'use strict';

exports.__esModule = true;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _utils = require('../utils');

var _cell = require('../cell');

var _cell2 = _interopRequireDefault(_cell);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = (0, _utils.create)({
  render: function render() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('cell', { staticClass: "van-field", class: {
        'van-field--has-textarea': _vm.type === 'textarea',
        'van-field--nolabel': !_vm.label,
        'van-field--disabled': _vm.$attrs.disabled,
        'van-field--error': _vm.error,
        'van-field--border': _vm.border,
        'van-field--autosize': _vm.autosize,
        'van-field--has-icon': _vm.hasIcon,
        'van-hairline--surround': _vm.border
      }, attrs: { "title": _vm.label, "required": _vm.required } }, [_vm.type === 'textarea' ? _c('textarea', _vm._g(_vm._b({ ref: "textarea", staticClass: "van-field__control", domProps: { "value": _vm.value } }, 'textarea', _vm.$attrs, false), _vm.listeners)) : _c('input', _vm._g(_vm._b({ staticClass: "van-field__control", attrs: { "type": _vm.type }, domProps: { "value": _vm.value } }, 'input', _vm.$attrs, false), _vm.listeners)), _vm.hasIcon ? _c('div', { directives: [{ name: "show", rawName: "v-show", value: _vm.$slots.icon || _vm.value, expression: "$slots.icon || value" }], staticClass: "van-field__icon", on: { "touchstart": function touchstart($event) {
          $event.preventDefault();_vm.onClickIcon($event);
        } } }, [_vm._t("icon", [_c('icon', { attrs: { "name": _vm.icon } })])], 2) : _vm._e()]);
  },

  name: 'van-field',

  components: {
    Cell: _cell2.default
  },

  props: {
    type: {
      type: String,
      default: 'text'
    },
    value: {},
    icon: String,
    label: String,
    error: Boolean,
    border: Boolean,
    required: Boolean,
    autosize: Boolean,
    onIconClick: {
      type: Function,
      default: function _default() {}
    }
  },

  watch: {
    value: function value() {
      if (this.autosize && this.type === 'textarea') {
        this.$nextTick(this.adjustSize);
      }
    }
  },

  mounted: function mounted() {
    if (this.autosize && this.type === 'textarea') {
      var el = this.$refs.textarea;
      var scrollHeight = el.scrollHeight;
      if (scrollHeight !== 0) {
        el.style.height = scrollHeight + 'px';
      }
      el.style.overflowY = 'hidden';
    }
  },


  computed: {
    hasIcon: function hasIcon() {
      return this.$slots.icon || this.icon;
    },
    listeners: function listeners() {
      return (0, _extends3.default)({}, this.$listeners, {
        input: this.onInput,
        keypress: this.onKeypress
      });
    }
  },

  methods: {
    onInput: function onInput(event) {
      this.$emit('input', event.target.value);
    },
    onClickIcon: function onClickIcon() {
      this.$emit('click-icon');
      this.onIconClick();
    },
    onKeypress: function onKeypress(event) {
      if (this.type === 'number') {
        var keyCode = event.keyCode;

        var allowPoint = this.value.indexOf('.') === -1;
        var isValidKey = keyCode >= 48 && keyCode <= 57 || keyCode === 46 && allowPoint;
        if (!isValidKey) {
          event.preventDefault();
        }
      }
      this.$emit('keypress', event);
    },
    adjustSize: function adjustSize() {
      var el = this.$refs.textarea;
      el.style.height = 'auto';
      el.style.height = el.scrollHeight + 'px';
    }
  }
});