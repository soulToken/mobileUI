'use strict';

exports.__esModule = true;

var _utils = require('../../utils');

var _field = require('../../field');

var _field2 = _interopRequireDefault(_field);

var _cellGroup = require('../../cell-group');

var _cellGroup2 = _interopRequireDefault(_cellGroup);

var _email = require('../../utils/validate/email');

var _email2 = _interopRequireDefault(_email);

var _number = require('../../utils/validate/number');

var _number2 = _interopRequireDefault(_number);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = (0, _utils.create)({
  render: function render() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('cell-group', { staticClass: "van-sku-messages" }, [_vm._l(_vm.internalMessages, function (message, index) {
      return [message.type === 'image' ? void 0 : message.multiple == '1' ? _c('field', { key: _vm.goodsId + "-" + index, attrs: { "required": message.required == '1', "label": message.name, "placeholder": _vm.getPlaceholder('textarea'), "type": "textarea" }, model: { value: _vm.messageValues[index], callback: function callback($$v) {
            _vm.$set(_vm.messageValues, index, $$v);
          }, expression: "messageValues[index]" } }) : _c('field', { key: _vm.goodsId + "-" + index, attrs: { "required": message.required == '1', "label": message.name, "placeholder": _vm.getPlaceholder(message.type), "type": _vm.getType(message) }, model: { value: _vm.messageValues[index], callback: function callback($$v) {
            _vm.$set(_vm.messageValues, index, $$v);
          }, expression: "messageValues[index]" } })];
    })], 2);
  },

  name: 'van-sku-messages',

  components: {
    Field: _field2.default,
    CellGroup: _cellGroup2.default
  },

  props: {
    messages: Array,
    messagePlaceholderMap: Object,
    goodsId: [Number, String]
  },

  computed: {
    internalMessages: function internalMessages() {
      if (Object.prototype.toString.call(this.messages) === '[object Array]') {
        return this.messages;
      }
      return [];
    },
    messageValues: function messageValues() {
      var messageValues = [];
      this.internalMessages.forEach(function (message, index) {
        messageValues[index] = '';
      });

      return messageValues;
    }
  },

  methods: {
    getType: function getType(_ref) {
      var type = _ref.type,
          datetime = _ref.datetime;

      if (type === 'id_no') return 'text';
      return datetime > 0 ? 'datetime-local' : type;
    },
    getMessages: function getMessages() {
      var _this = this;

      var messages = {};

      this.messageValues.forEach(function (value, index) {
        if (_this.internalMessages[index].datetime > 0) {
          value = value.replace(/T/g, ' ');
        }
        messages['message_' + index] = value;
      });

      return messages;
    },
    getCartMessages: function getCartMessages() {
      var _this2 = this;

      var messages = {};

      this.messageValues.forEach(function (value, index) {
        var message = _this2.internalMessages[index];
        if (message.datetime > 0) {
          value = value.replace(/T/g, ' ');
        }
        messages[message.name] = value;
      });

      return messages;
    },
    getPlaceholder: function getPlaceholder(key) {
      return this.messagePlaceholderMap[key] || this.$t('placeholder.' + key);
    },
    validateMessages: function validateMessages() {
      var values = this.messageValues;

      for (var i = 0; i < values.length; i++) {
        var value = values[i];
        var message = this.internalMessages[i];

        if (value === '') {
          // 必填字段的校验
          if (message.required == '1') {
            // eslint-disable-line
            if (message.type === 'image') {
              continue;
            } else {
              return this.$t('fill') + message.name;
            }
          }
        } else {
          if (message.type === 'tel' && !(0, _number2.default)(value)) {
            return this.$t('number');
          }
          if (message.type === 'email' && !(0, _email2.default)(value)) {
            return this.$t('email');
          }
          if (message.type === 'id_no' && (value.length < 15 || value.length > 18)) {
            return this.$t('id_no');
          }
        }

        if (value.length > 200) {
          return message.name + ' ' + this.$t('overlimit');
        }
      }
    }
  }
});