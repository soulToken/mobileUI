'use strict';

exports.__esModule = true;

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _utils = require('../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = (0, _utils.create)({
  render: function render() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { staticClass: "van-uploader" }, [_vm._t("default"), _c('input', _vm._b({ ref: "input", staticClass: "van-uploader__input", attrs: { "type": "file", "disabled": _vm.disabled }, on: { "change": _vm.onChange } }, 'input', _vm.$attrs, false))], 2);
  },

  name: 'van-uploader',

  props: {
    disabled: Boolean,
    beforeRead: Function,
    afterRead: Function,
    resultType: {
      type: String,
      default: 'dataUrl'
    }
  },

  methods: {
    onChange: function onChange(event) {
      var _this = this;

      var files = event.target.files;

      if (this.disabled || !files.length) {
        return;
      }

      files = files.length === 1 ? files[0] : [].slice.call(files, 0);
      if (!files || this.beforeRead && !this.beforeRead(files)) {
        return;
      }

      if (Array.isArray(files)) {
        _promise2.default.all(files.map(this.readFile)).then(function (contents) {
          _this.onAfterRead(files.map(function (file, index) {
            return {
              file: files[index],
              content: contents[index]
            };
          }));
        });
      } else {
        this.readFile(files).then(function (content) {
          _this.onAfterRead({ file: files, content: content });
        });
      }
    },
    readFile: function readFile(file) {
      var _this2 = this;

      return new _promise2.default(function (resolve) {
        var reader = new FileReader();

        reader.onload = function (event) {
          resolve(event.target.result);
        };

        if (_this2.resultType === 'dataUrl') {
          reader.readAsDataURL(file);
        } else if (_this2.resultType === 'text') {
          reader.readAsText(file);
        }
      });
    },
    onAfterRead: function onAfterRead(file) {
      this.afterRead && this.afterRead(file);
      this.$refs.input && (this.$refs.input.value = '');
    }
  }
});